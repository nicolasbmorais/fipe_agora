// Mocks generated by Mockito 5.4.5 from annotations
// in fipe_agora/test/src/data/datasource/fipe_datasource_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i2;
import 'package:fipe_agora/src/data/datasource/fipe_datasource_impl.dart'
    as _i4;
import 'package:fipe_agora/src/data/models/models.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDio_0 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFipeTableModel_1 extends _i1.SmartFake
    implements _i3.FipeTableModel {
  _FakeFipeTableModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FipeDatasourceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockFipeDatasourceImpl extends _i1.Mock
    implements _i4.FipeDatasourceImpl {
  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_0(this, Invocation.getter(#dio)),
            returnValueForMissingStub: _FakeDio_0(
              this,
              Invocation.getter(#dio),
            ),
          )
          as _i2.Dio);

  @override
  _i5.Future<List<_i3.ReferenceTableModel>> getReferenceTable() =>
      (super.noSuchMethod(
            Invocation.method(#getReferenceTable, []),
            returnValue: _i5.Future<List<_i3.ReferenceTableModel>>.value(
              <_i3.ReferenceTableModel>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i3.ReferenceTableModel>>.value(
                  <_i3.ReferenceTableModel>[],
                ),
          )
          as _i5.Future<List<_i3.ReferenceTableModel>>);

  @override
  _i5.Future<List<_i3.BrandModel>> getBrands({
    required String? tableCode,
    required String? vehicleCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getBrands, [], {
              #tableCode: tableCode,
              #vehicleCode: vehicleCode,
            }),
            returnValue: _i5.Future<List<_i3.BrandModel>>.value(
              <_i3.BrandModel>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i3.BrandModel>>.value(
              <_i3.BrandModel>[],
            ),
          )
          as _i5.Future<List<_i3.BrandModel>>);

  @override
  _i5.Future<List<_i3.VehicleModels>> getVehicleModels({
    required String? tableCode,
    required String? vehicleCode,
    required String? brandCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getVehicleModels, [], {
              #tableCode: tableCode,
              #vehicleCode: vehicleCode,
              #brandCode: brandCode,
            }),
            returnValue: _i5.Future<List<_i3.VehicleModels>>.value(
              <_i3.VehicleModels>[],
            ),
            returnValueForMissingStub:
                _i5.Future<List<_i3.VehicleModels>>.value(
                  <_i3.VehicleModels>[],
                ),
          )
          as _i5.Future<List<_i3.VehicleModels>>);

  @override
  _i5.Future<List<_i3.YearByModel>> getYearByModel({
    required String? tableCode,
    required String? vehicleCode,
    required String? brandCode,
    required String? modelCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getYearByModel, [], {
              #tableCode: tableCode,
              #vehicleCode: vehicleCode,
              #brandCode: brandCode,
              #modelCode: modelCode,
            }),
            returnValue: _i5.Future<List<_i3.YearByModel>>.value(
              <_i3.YearByModel>[],
            ),
            returnValueForMissingStub: _i5.Future<List<_i3.YearByModel>>.value(
              <_i3.YearByModel>[],
            ),
          )
          as _i5.Future<List<_i3.YearByModel>>);

  @override
  _i5.Future<_i3.FipeTableModel> getFipeTable({
    required String? tableCode,
    required String? vehicleCode,
    required String? brandCode,
    required String? yearId,
    required String? modelCode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFipeTable, [], {
              #tableCode: tableCode,
              #vehicleCode: vehicleCode,
              #brandCode: brandCode,
              #yearId: yearId,
              #modelCode: modelCode,
            }),
            returnValue: _i5.Future<_i3.FipeTableModel>.value(
              _FakeFipeTableModel_1(
                this,
                Invocation.method(#getFipeTable, [], {
                  #tableCode: tableCode,
                  #vehicleCode: vehicleCode,
                  #brandCode: brandCode,
                  #yearId: yearId,
                  #modelCode: modelCode,
                }),
              ),
            ),
            returnValueForMissingStub: _i5.Future<_i3.FipeTableModel>.value(
              _FakeFipeTableModel_1(
                this,
                Invocation.method(#getFipeTable, [], {
                  #tableCode: tableCode,
                  #vehicleCode: vehicleCode,
                  #brandCode: brandCode,
                  #yearId: yearId,
                  #modelCode: modelCode,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.FipeTableModel>);
}
